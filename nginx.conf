# Nginx user and worker processes
user  nginx;
worker_processes  auto;

# Error log and PID file
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

# Event module settings
events {
    worker_connections  1024;
}

# HTTP block containing server configurations
http {
    include       /etc/nginx/mime.types; # Include MIME types for proper content serving
    default_type  application/octet-stream; # Default MIME type

    # Log format for access logs
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main; # Access log file

    sendfile        on; # Enable sendfile for efficient file transfers
    keepalive_timeout  65; # Keep-alive timeout for connections

    # Server block for the public-facing keep-alive page on port 443
    server {
        listen 443 ssl http2; # Listen on port 443 for HTTPS traffic with HTTP/2
        listen [::]:443 ssl http2; # Listen on IPv6 as well

        # SSL certificate paths (generated by start.sh)
        ssl_certificate /etc/nginx/certs/nginx.crt;
        ssl_certificate_key /etc/nginx/certs/nginx.key;
        ssl_protocols TLSv1.2 TLSv1.3; # Recommended SSL/TLS protocols
        ssl_ciphers HIGH:!aNULL:!MD5; # Strong cipher suites
        ssl_prefer_server_ciphers on; # Prefer server's cipher order

        # Serve the simple keep-alive HTML page at the root (/)
        location / {
            root /var/www/html; # Document root for this location
            index index.html; # Default file to serve
            try_files $uri $uri/ =404; # Try serving file, then directory, then 404
        }
    }

    # Server block for the Tor Hidden Service on internal port 8080
    # This server will only be accessible via the Tor network through the hidden service.
    server {
        listen 127.0.0.1:8080; # Listen on localhost port 8080, accessible by Tor

        # Location block to reverse proxy the target website
        location / {
            proxy_pass https://2305878273.7844380499.cfd/; # The target website to reverse proxy
            # The trailing slash on proxy_pass is important: it tells Nginx to pass the URI as is.

            # Spoofing headers to mimic a typical browser request
            proxy_set_header User-Agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36";
            proxy_set_header Accept-Language "en-US,en;q=0.9";
            proxy_set_header Referer "https://www.google.com/"; # Spoof a common referrer
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Pass client IP
            proxy_set_header X-Real-IP $remote_addr; # Pass real client IP
            proxy_set_header Host "2305878273.7844380499.cfd"; # Crucial: Set the Host header for the upstream server

            # SSL/TLS settings for proxying to the upstream server
            proxy_ssl_server_name on; # Enable SNI for upstream SSL connections
            proxy_ssl_name "2305878273.7844380499.cfd"; # Set the SNI hostname for upstream
            proxy_ssl_protocols TLSv1.2 TLSv1.3; # Recommended protocols for upstream
            proxy_ssl_ciphers HIGH:!aNULL:!MD5; # Strong ciphers for upstream
            proxy_ssl_verify off; # WARNING: For testing only. In a production environment, verify upstream certificates.

            # Other proxy settings for robust proxying
            proxy_redirect off; # Do not allow Nginx to rewrite redirects from upstream
            proxy_buffering off; # Disable buffering to reduce latency
            proxy_http_version 1.1; # Use HTTP/1.1 for upstream connections
            proxy_set_header Connection ""; # Important for HTTP/1.1 keep-alive with upstream
        }
    }
}
